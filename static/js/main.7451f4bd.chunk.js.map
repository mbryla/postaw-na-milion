{"version":3,"sources":["components/Button.tsx","components/AuthKeyInput.tsx","components/ModeSelector.tsx","pubnub/PubNubContext.ts","pubnub/useListener.ts","components/Questions.tsx","state/GameState.ts","state/AdminState.ts","components/QuestionsLoader.tsx","layouts/AdminLayout.tsx","pubnub/usePublisher.ts","components/Timer.tsx","layouts/QuestionLayout.tsx","layouts/CategoriesLayout.tsx","layouts/StatusLayout.tsx","layouts/TitleLayout.tsx","layouts/PlayerLayout.tsx","useInterval.ts","pubnub/PubNubProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","color","disabled","onClick","children","style","rest","backgroundColor","marginRight","padding","AuthKeyInput","authKey","setAuthKey","useState","value","setValue","display","alignItems","htmlFor","autoFocus","type","onChange","event","target","onKeyDown","key","flexGrow","margin","ModeSelector","setMode","marginTop","justifyContent","PubNubContext","createContext","undefined","channel","useListener","listener","listenerParameters","useMemo","message","console","debug","pubnub","useContext","Error","useEffect","addListener","subscribe","channels","removeListener","Questions","questions","usedQuestions","usedCategories","length","map","question","textDecoration","includes","id","text","possibleCategories","filter","possibleCategory","index","join","answers","defaultGameState","defaultRoundState","defaultAdminState","QuestionsLoader","onQuestionsLoad","questionsJson","setQuestionsJson","loadQuestions","questionsArray","JSON","parse","questionsById","forEach","marginBottom","AdminLayout","adminState","setAdminState","gameState","setGameState","publish","useCallback","usePublisher","state","changeAdminState","changeGameState","send","then","catch","error","questionsSelectionMode","roundState","Object","values","unusedQuestions","shouldBeAskedLast","firstQuestion","secondQuestion","firstQuestionCategoryIndex","findIndex","cateogry","firstQuestionCategory","firstQuestionCategoryId","secondQuestionCategoryIndex","category","secondQuestionCategory","secondQuestionCategoryId","answeredQuestionsCount","categories","selectedAnswers","selection","correctAnswerIndex","totalQuestionsCount","keys","AnswersSelection","answer","answerIndex","selectAnswer","CategorySelection","selectCategory","categoryIndex","Array","fill","ClockSection","SynchronizationSection","pad","digits","repeat","slice","Timer","minutes","Math","floor","seconds","Block","isSelected","isCorrect","borderRadius","border","boxShadow","textAlign","QuestionLayout","time","width","CategoriesLayout","StatusLayout","TitleLayout","src","alt","DEFAULT_TIME_MS","PlayerLayout","setState","isTimerRunning","setIsTimerRunning","setTime","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","height","flexDirection","background","fontSize","PubNubProvider","uuid","PubNub","generateUUID","publishKey","process","subscribeKey","Provider","App","mode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7451f4bd.chunk.js","sourcesContent":["import { FC, ReactNode } from 'react';\n\nexport interface ButtonProps {\n  color?: string;\n  children: ReactNode;\n  onClick: () => void;\n  disabled?: boolean;\n  style?: Record<string, unknown>;\n}\n\nexport const Button: FC<ButtonProps> = ({\n  color = '#efefef',\n  disabled,\n  onClick,\n  children,\n  style = {},\n  ...rest\n}) => {\n  return (\n    <button\n      style={{\n        backgroundColor: disabled ? '#efefef' : color,\n        marginRight: '10px',\n        padding: '5px',\n        ...style,\n      }}\n      onClick={onClick}\n      disabled={disabled}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { ChangeEvent, KeyboardEvent, FC, useState } from 'react';\nimport { Button } from './Button';\n\nexport interface AuthKeyInputProps {\n  authKey: string;\n  setAuthKey: (authKey: string) => void;\n}\n\nexport const AuthKeyInput: FC<AuthKeyInputProps> = ({\n  authKey,\n  setAuthKey,\n}) => {\n  const [value, setValue] = useState(authKey);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      setAuthKey(value);\n    }\n  };\n\n  const handleClick = () => {\n    setAuthKey(value);\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <label htmlFor=\"auth-key\">klucz dostępu:</label>\n      <input\n        autoFocus\n        type=\"password\"\n        value={value}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        style={{ flexGrow: 1, margin: '0 10px' }}\n      />\n      <Button onClick={handleClick} color=\"lightcoral\">zmień</Button>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { Button } from './Button';\n\ninterface ModeSelectorProps {\n  setMode: (mode: 'admin' | 'player') => void;\n}\n\nexport const ModeSelector: FC<ModeSelectorProps> = ({ setMode }) => {\n  const handlePlayerModeButtonClick = () => {\n    setMode('player');\n  };\n\n  const handleAdminModeButtonClick = () => {\n    setMode('admin');\n  };\n\n  return (\n    <div\n      style={{ marginTop: '20px', display: 'flex', justifyContent: 'center' }}\n    >\n      <Button onClick={handlePlayerModeButtonClick} style={{ marginRight: '40px' }}>gracz</Button>\n      <Button onClick={handleAdminModeButtonClick}>admin</Button>\n    </div>\n  );\n};\n","import PubNub from 'pubnub';\nimport { createContext } from 'react';\n\nexport const PubNubContext = createContext<PubNub | undefined>(undefined);\n\nexport const channel = 'events';\n","import { ListenerParameters } from 'pubnub';\nimport { useContext, useEffect, useMemo } from 'react';\n\nimport { channel, PubNubContext } from '../pubnub/PubNubContext';\nimport { Message } from './PubNubMessage';\n\nexport const useListener = (listener: (message: Message) => void) => {\n  const listenerParameters: ListenerParameters = useMemo(\n    () => ({\n      message: (message) => {\n        console.debug('received message', message);\n\n        if (message.channel === channel) {\n          listener(message.message as Message);\n        }\n      },\n    }),\n    [listener]\n  );\n\n  const pubnub = useContext(PubNubContext);\n\n  if (!pubnub) {\n    throw new Error('PubNubContext is undefined');\n  }\n\n  useEffect(() => {\n    pubnub.addListener(listenerParameters);\n    pubnub.subscribe({ channels: ['events'] });\n    return () => pubnub?.removeListener(listenerParameters);\n  }, [pubnub, listenerParameters]);\n};\n","import { FC } from 'react';\n\nimport { Question } from '../state/Question';\n\ninterface QuestionsProps {\n  questions: Array<Question>;\n  usedQuestions: Array<string>;\n  usedCategories: Array<string>;\n}\n\nexport const Questions: FC<QuestionsProps> = ({\n  questions,\n  usedQuestions,\n  usedCategories,\n}) => {\n  return (\n    <div>\n      <h1>Wczytane pytania ({questions.length})</h1>\n      <ul>\n        {questions.map((question) => (\n          <li key={question.id}>\n            <span\n              style={{\n                textDecoration: usedQuestions.includes(question.id)\n                  ? 'line-through'\n                  : 'none',\n              }}\n            >\n              {question.text}\n            </span>\n            <ul>\n              <li>\n                kategorie:{' '}\n                {question.possibleCategories\n                  .filter(\n                    (possibleCategory, index) =>\n                      !usedCategories.includes(`${question.id}-${index}`)\n                  )\n                  .join(', ')}\n              </li>\n              <li>\n                zużyte kategorie:{' '}\n                <span style={{ textDecoration: 'line-through' }}>\n                  {question.possibleCategories\n                    .filter((possibleCategory, index) =>\n                      usedCategories.includes(`${question.id}-${index}`)\n                    )\n                    .join(', ')}\n                </span>\n              </li>\n              <li>odpowiedzi: {question.answers.join(', ')}</li>\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export interface GameStateShowTitle {\n  type: 'game-state-show-title';\n}\n\nexport interface GameStateShowStatus {\n  type: 'game-state-show-status';\n  answeredQuestionsCount: number;\n  totalQuestionsCount: number;\n}\n\nexport interface GameStateShowCategories {\n  type: 'game-state-show-categories';\n  categories: Array<string>;\n}\n\nexport interface GameStateShowQuestion {\n  type: 'game-state-show-question';\n  question?: string;\n  answers: Array<string>;\n  selectedAnswers: Array<boolean>;\n  correctAnswerIndex?: number;\n}\n\nexport type GameState =\n  | GameStateShowTitle\n  | GameStateShowStatus\n  | GameStateShowCategories\n  | GameStateShowQuestion;\n\nexport const defaultGameState: GameState = { type: 'game-state-show-title' };\n","import { Question, QuestionsById } from './Question';\n\nexport interface AdminStateEmpty {\n  type: 'admin-state-empty';\n}\n\nexport interface AdminStateBase {\n  type: 'admin-state-base';\n  questionsSelectionMode: 'manual' | 'automatic';\n  usedQuestions: Array<string>;\n  usedCategories: Array<string>;\n  answeredQuestionsCount: number;\n  questionsById: QuestionsById;\n  roundState: RoundState;\n}\n\nexport interface RoundStateEmpty {\n  type: 'round-state-empty';\n}\n\nexport interface RoundStatePickQuestions {\n  type: 'round-state-pick-questions';\n  pickedQuestionsIds: Array<string>;\n}\n\nexport interface RoundStateSelectCategory {\n  type: 'round-state-select-category';\n  firstQuestion: Question;\n  firstQuestionCategory: string;\n  secondQuestion: Question;\n  secondQuestionCategory: string;\n}\n\nexport interface RoundStateShowQuestion {\n  type: 'round-state-show-question';\n  question: Question;\n}\n\nexport interface RoundStateSelectAnswers {\n  type: 'round-state-select-answers';\n  question: Question;\n}\n\nexport type RoundState =\n  | RoundStateEmpty\n  | RoundStatePickQuestions\n  | RoundStateSelectCategory\n  | RoundStateShowQuestion\n  | RoundStateSelectAnswers;\n\nexport const defaultRoundState: RoundState = { type: 'round-state-empty' };\n\nexport type AdminState = AdminStateEmpty | AdminStateBase;\n\nexport const defaultAdminState: AdminState = { type: 'admin-state-empty' };\n","import { ChangeEvent, FC, KeyboardEvent, useState } from 'react';\n\nimport { Question, QuestionsById } from '../state/Question';\nimport { Button } from './Button';\n\ninterface QuestionsLoaderProps {\n  onQuestionsLoad: (questions: QuestionsById) => void;\n}\n\nexport const QuestionsLoader: FC<QuestionsLoaderProps> = ({\n  onQuestionsLoad,\n}) => {\n  const [questionsJson, setQuestionsJson] = useState('');\n\n  const loadQuestions = () => {\n    const questionsArray = JSON.parse(questionsJson) as Array<Question>;\n\n    const questionsById: Record<string, Question> = {};\n    questionsArray.forEach(\n      (question) => (questionsById[question.id] = question)\n    );\n\n    onQuestionsLoad(questionsById);\n  };\n\n  const handleQuestionsChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuestionsJson(event.target.value);\n  };\n\n  const handleQuestionsKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      loadQuestions();\n    }\n  };\n\n  const handleQuestionsClick = () => {\n    loadQuestions();\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n      <label htmlFor=\"questions\">wczytaj pytania:</label>\n      <input\n        type=\"text\"\n        value={questionsJson}\n        onChange={handleQuestionsChange}\n        onKeyDown={handleQuestionsKeyDown}\n        style={{ flexGrow: 1, margin: '0 10px' }}\n      />\n      <Button onClick={handleQuestionsClick} color=\"lightcoral\">\n        wczytaj\n      </Button>\n    </div>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { Message } from '../pubnub/PubNubMessage';\nimport { useListener } from '../pubnub/useListener';\n\nimport { usePublisher } from '../pubnub/usePublisher';\nimport { Questions } from '../components/Questions';\nimport { Button } from '../components/Button';\n\nimport { defaultGameState, GameState } from '../state/GameState';\nimport {\n  AdminState,\n  defaultAdminState,\n  defaultRoundState,\n} from '../state/AdminState';\nimport { QuestionsLoader } from '../components/QuestionsLoader';\n\nexport const AdminLayout = () => {\n  const [adminState, setAdminState] = useState<AdminState>(defaultAdminState);\n  const [gameState, setGameState] = useState<GameState>(defaultGameState);\n  const publish = usePublisher();\n\n  useListener((message) => {\n    if (message.type === 'admin-state-update') {\n      setAdminState(message.state);\n    } else if (message.type === 'game-state-update') {\n      setGameState(message.state);\n    }\n  });\n\n  const changeAdminState = (state: AdminState) => {\n    publish({ type: 'admin-state-update', state });\n  };\n\n  const changeGameState = (state: GameState) => {\n    publish({ type: 'game-state-update', state });\n  };\n\n  const send = (message: Message) => {\n    publish(message)\n      .then(() => {\n        console.debug(`successfully sent \"${message.type}\" message`);\n      })\n      .catch((error) => {\n        console.error(`failed to send \"${message.type}\" message`);\n        console.debug(error);\n      });\n  };\n\n  const startRound = () => {\n    if (adminState.type === 'admin-state-base') {\n      const questions = Object.values(adminState.questionsById);\n      let unusedQuestions = questions\n        .filter((question) => !adminState.usedQuestions.includes(question.id))\n        .filter((question) => !question.shouldBeAskedLast);\n\n      if (unusedQuestions.length === 0) {\n        // use those which shouldBeAskedLast\n        unusedQuestions = questions.filter(\n          (question) => !adminState.usedQuestions.includes(question.id)\n        );\n\n        if (unusedQuestions.length === 0) {\n          return;\n        }\n      }\n\n      const firstQuestion = unusedQuestions[0];\n      const secondQuestion =\n        unusedQuestions.length === 1 ? firstQuestion : unusedQuestions[1];\n\n      const firstQuestionCategoryIndex = firstQuestion.possibleCategories.findIndex(\n        (cateogry, index) =>\n          !adminState.usedCategories.includes(`${firstQuestion.id}-${index}`)\n      );\n      const firstQuestionCategory =\n        firstQuestion.possibleCategories[firstQuestionCategoryIndex];\n      const firstQuestionCategoryId = `${firstQuestion.id}-${firstQuestionCategoryIndex}`;\n\n      const secondQuestionCategoryIndex = secondQuestion.possibleCategories.findIndex(\n        (category, index) =>\n          ![...adminState.usedCategories, firstQuestionCategoryId].includes(\n            `${secondQuestion.id}-${index}`\n          )\n      );\n      const secondQuestionCategory =\n        secondQuestion.possibleCategories[secondQuestionCategoryIndex];\n      const secondQuestionCategoryId = `${secondQuestion.id}-${secondQuestionCategoryIndex}`;\n\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        usedQuestions: adminState.usedQuestions,\n        questionsById: adminState.questionsById,\n        answeredQuestionsCount: adminState.answeredQuestionsCount,\n        usedCategories: [\n          ...adminState.usedCategories,\n          firstQuestionCategoryId,\n          secondQuestionCategoryId,\n        ],\n        roundState: {\n          type: 'round-state-select-category',\n          firstQuestion,\n          firstQuestionCategory,\n          secondQuestion,\n          secondQuestionCategory,\n        },\n      });\n\n      changeGameState({\n        type: 'game-state-show-categories',\n        categories: [firstQuestionCategory, secondQuestionCategory],\n      });\n    }\n  };\n\n  const showQuestion = () => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      adminState.roundState.type === 'round-state-show-question' &&\n      gameState.type === 'game-state-show-question'\n    ) {\n      send({\n        type: 'reset-timer-60',\n      });\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        questionsById: adminState.questionsById,\n        answeredQuestionsCount: adminState.answeredQuestionsCount,\n        usedCategories: adminState.usedCategories,\n        usedQuestions: adminState.usedQuestions,\n        roundState: {\n          type: 'round-state-select-answers',\n          question: adminState.roundState.question,\n        },\n      });\n      changeGameState({\n        type: 'game-state-show-question',\n        answers: gameState.answers,\n        selectedAnswers: gameState.selectedAnswers,\n        question: adminState.roundState.question.text,\n      });\n    }\n  };\n\n  const showGoodAnswers = () => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      adminState.roundState.type === 'round-state-select-answers' &&\n      gameState.type === 'game-state-show-question'\n    ) {\n      send({\n        type: 'stop-timer',\n      });\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        questionsById: adminState.questionsById,\n        answeredQuestionsCount: adminState.answeredQuestionsCount,\n        usedCategories: adminState.usedCategories,\n        usedQuestions: adminState.usedQuestions,\n        roundState: {\n          type: 'round-state-empty',\n        },\n      });\n      changeGameState({\n        type: 'game-state-show-question',\n        answers: gameState.answers,\n        selectedAnswers: gameState.selectedAnswers,\n        question: adminState.roundState.question.text,\n        correctAnswerIndex: adminState.roundState.question.correctAnswerIndex,\n      });\n    }\n  };\n\n  const showStatus = () => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      gameState.type === 'game-state-show-question' &&\n      gameState.correctAnswerIndex !== undefined\n    ) {\n      const answeredQuestionsCount = adminState.answeredQuestionsCount;\n      const totalQuestionsCount = Object.keys(adminState.questionsById).length;\n\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        questionsById: adminState.questionsById,\n        usedCategories: adminState.usedCategories,\n        usedQuestions: adminState.usedQuestions,\n        answeredQuestionsCount,\n        roundState: {\n          type: 'round-state-empty',\n        },\n      });\n\n      changeGameState(\n        answeredQuestionsCount === totalQuestionsCount\n          ? { type: 'game-state-show-title' }\n          : {\n              type: 'game-state-show-status',\n              answeredQuestionsCount,\n              totalQuestionsCount,\n            }\n      );\n    }\n  };\n\n  return (\n    <div>\n      {adminState.type === 'admin-state-base' && (\n        <>\n          <h1>Nawigacja</h1>\n          {adminState.questionsSelectionMode === 'manual' && (\n            <Button\n              disabled={\n                (gameState.type === 'game-state-show-title' ||\n                  gameState.type === 'game-state-show-status') &&\n                adminState.roundState.type === 'round-state-empty'\n              }\n              onClick={() => {}}\n              style={{ marginBottom: '10px' }}\n            >\n              wybierz pytania\n            </Button>\n          )}\n          <Button\n            disabled={\n              !(\n                (gameState.type === 'game-state-show-title' ||\n                  gameState.type === 'game-state-show-status') &&\n                adminState.roundState.type === 'round-state-empty'\n              )\n            }\n            onClick={startRound}\n            color=\"lightgreen\"\n            style={{ marginBottom: '10px' }}\n          >\n            rozpocznij rundę\n          </Button>\n          <Button\n            disabled={\n              !(adminState.roundState.type === 'round-state-show-question')\n            }\n            color=\"lightgreen\"\n            onClick={showQuestion}\n            style={{ marginBottom: '10px' }}\n          >\n            pokaż pytanie\n          </Button>\n          <Button\n            disabled={\n              !(adminState.roundState.type === 'round-state-select-answers') ||\n              (gameState.type === 'game-state-show-question' &&\n                gameState.selectedAnswers.filter(\n                  (selection) => selection === true\n                ).length === 0)\n            }\n            onClick={showGoodAnswers}\n            color=\"lightgreen\"\n            style={{ marginBottom: '10px' }}\n          >\n            pokaż poprawne odpowiedzi\n          </Button>\n          <Button\n            disabled={\n              !(\n                gameState.type === 'game-state-show-question' &&\n                gameState.correctAnswerIndex !== undefined\n              )\n            }\n            onClick={showStatus}\n            color=\"lightgreen\"\n            style={{ marginBottom: '10px' }}\n          >\n            pokaż podsumowanie\n          </Button>\n\n          <ClockSection send={send} />\n          {(adminState.roundState.type === 'round-state-select-category' ||\n            adminState.roundState.type === 'round-state-select-answers') && (\n            <>\n              <h1>Rozgrywka</h1>\n              {adminState.roundState.type === 'round-state-select-category' && (\n                <CategorySelection\n                  changeAdminState={changeAdminState}\n                  changeGameState={changeGameState}\n                  adminState={adminState}\n                  gameState={gameState}\n                />\n              )}\n              {adminState.roundState.type === 'round-state-select-answers' && (\n                <AnswersSelection\n                  changeAdminState={changeAdminState}\n                  changeGameState={changeGameState}\n                  adminState={adminState}\n                  gameState={gameState}\n                />\n              )}\n            </>\n          )}\n        </>\n      )}\n      {adminState.type === 'admin-state-base' && (\n        <Questions\n          questions={Object.values(adminState.questionsById)}\n          usedQuestions={adminState.usedQuestions}\n          usedCategories={adminState.usedCategories}\n        />\n      )}\n      <SynchronizationSection\n        adminState={adminState}\n        changeAdminState={changeAdminState}\n        gameState={gameState}\n        changeGameState={changeGameState}\n      />\n      <h1>Konfiguracja serwisu</h1>\n      <QuestionsLoader\n        onQuestionsLoad={(questionsById) => {\n          changeAdminState({\n            type: 'admin-state-base',\n            questionsSelectionMode: 'automatic',\n            usedQuestions: [],\n            usedCategories: [],\n            answeredQuestionsCount: 0,\n            roundState: defaultRoundState,\n            questionsById,\n          });\n          changeGameState(defaultGameState);\n        }}\n      />\n    </div>\n  );\n};\n\ninterface AnswersSelectionProps {\n  adminState: AdminState;\n  changeAdminState: (adminState: AdminState) => void;\n  gameState: GameState;\n  changeGameState: (gameState: GameState) => void;\n}\n\nconst AnswersSelection: FC<AnswersSelectionProps> = ({\n  adminState,\n  gameState,\n  changeGameState,\n}) => {\n  if (\n    adminState.type !== 'admin-state-base' ||\n    adminState.roundState.type !== 'round-state-select-answers'\n  ) {\n    return null;\n  }\n\n  const selectAnswer = (answerIndex: number) => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      adminState.roundState.type === 'round-state-select-answers' &&\n      gameState.type === 'game-state-show-question'\n    ) {\n      const selectedAnswers = [...gameState.selectedAnswers];\n      selectedAnswers[answerIndex] = !selectedAnswers[answerIndex];\n\n      changeGameState({\n        type: 'game-state-show-question',\n        question: gameState.question,\n        answers: gameState.answers,\n        selectedAnswers,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Przełącz zaznaczenie odpowiedzi</h2>\n      {adminState.roundState.question.answers.map((answer, index) => {\n        return (\n          <Button\n            key={answer}\n            onClick={() => selectAnswer(index)}\n            color={\n              gameState.type === 'game-state-show-question' &&\n              gameState.selectedAnswers[index]\n                ? 'yellow'\n                : 'lightyellow'\n            }\n            style={{ marginBottom: '10px' }}\n          >\n            {answer}\n          </Button>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface CategorySelectionProps {\n  adminState: AdminState;\n  changeAdminState: (adminState: AdminState) => void;\n  gameState: GameState;\n  changeGameState: (gameState: GameState) => void;\n}\n\nconst CategorySelection: FC<CategorySelectionProps> = ({\n  adminState,\n  changeAdminState,\n  changeGameState,\n}) => {\n  if (\n    adminState.type !== 'admin-state-base' ||\n    adminState.roundState.type !== 'round-state-select-category'\n  ) {\n    return null;\n  }\n\n  const selectCategory = (categoryIndex: number) => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      adminState.roundState.type === 'round-state-select-category'\n    ) {\n      const question =\n        categoryIndex === 0\n          ? adminState.roundState.firstQuestion\n          : adminState.roundState.secondQuestion;\n\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        usedQuestions: [...adminState.usedQuestions, question.id],\n        questionsById: adminState.questionsById,\n        answeredQuestionsCount: adminState.answeredQuestionsCount + 1,\n        usedCategories: adminState.usedCategories,\n        roundState: {\n          type: 'round-state-show-question',\n          question,\n        },\n      });\n      changeGameState({\n        type: 'game-state-show-question',\n        answers: question.answers,\n        selectedAnswers: new Array(question.answers.length).fill(false),\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Wskaż wybraną kategorię</h2>\n      <Button onClick={() => selectCategory(0)} color=\"lightgreen\">\n        {adminState.roundState.firstQuestionCategory}\n      </Button>\n      <Button onClick={() => selectCategory(1)} color=\"lightgreen\">\n        {adminState.roundState.secondQuestionCategory}\n      </Button>\n    </div>\n  );\n};\n\ninterface ClockSectionProps {\n  send: (message: Message) => void;\n}\n\nconst ClockSection: FC<ClockSectionProps> = ({ send }) => {\n  return (\n    <div>\n      <h1>Zegar</h1>\n      <div>\n        <Button onClick={() => send({ type: 'start-timer' })} style={{ marginBottom: '10px' }}>start</Button>\n        <Button onClick={() => send({ type: 'stop-timer' })} style={{ marginBottom: '10px' }}>stop</Button>\n        <Button onClick={() => send({ type: 'reset-timer-60' })} style={{ marginBottom: '10px' }}>\n          reset 60s\n        </Button>\n        <Button onClick={() => send({ type: 'reset-timer-30' })} style={{ marginBottom: '10px' }}>\n          reset 30s\n        </Button>\n      </div>\n    </div>\n  );\n};\n\ninterface AdminSectionProps {\n  adminState: AdminState;\n  changeAdminState: (state: AdminState) => void;\n  gameState: GameState;\n  changeGameState: (state: GameState) => void;\n}\n\nconst SynchronizationSection: FC<AdminSectionProps> = ({\n  adminState,\n  changeAdminState,\n  gameState,\n  changeGameState,\n}) => {\n  return (\n    <div>\n      <h1>Synchronizacja</h1>\n      <Button\n        onClick={() => {\n          changeAdminState(adminState);\n          changeGameState(gameState);\n        }}\n        color=\"yellow\"\n      >\n        wymuś propagację stanu\n      </Button>\n      <Button\n        onClick={() => {\n          changeAdminState(defaultAdminState);\n          changeGameState(defaultGameState);\n        }}\n        color=\"lightcoral\"\n      >\n        resetuj stan\n      </Button>\n    </div>\n  );\n};\n","import { useCallback, useContext } from 'react';\n\nimport { channel, PubNubContext } from '../pubnub/PubNubContext';\nimport { Message } from './PubNubMessage';\n\nexport const usePublisher = () => {\n  const pubnub = useContext(PubNubContext);\n\n  if (!pubnub) {\n    throw new Error('PubNubContext is undefined');\n  }\n\n  const publish = useCallback(\n    (message: Message) =>\n      pubnub.publish({\n        channel,\n        message,\n      }),\n    [pubnub]\n  );\n\n  return publish;\n};\n","import { FC } from 'react';\n\nconst pad = (value: number, digits: number) => {\n  return ('0'.repeat(digits) + value).slice(-1 * digits);\n};\n\ninterface TimerProps {\n  value: number;\n}\n\nexport const Timer: FC<TimerProps> = ({ value }) => {\n  const minutes = Math.floor(value / (1000 * 60));\n  const seconds = Math.floor(value / 1000) % 60;\n\n  return (\n    <span>\n      {pad(minutes, 2)}:{pad(seconds, 2)}\n    </span>\n  );\n};\n","import { FC, ReactNode } from 'react';\nimport { Timer } from '../components/Timer';\n\ninterface BlockProps {\n  children: ReactNode;\n  isSelected?: boolean;\n  isCorrect?: boolean;\n}\n\nexport const Block: FC<BlockProps> = ({\n  children,\n  isSelected = false,\n  isCorrect,\n}) => {\n  const color =\n    isCorrect === undefined\n      ? '#f1f1f1'\n      : isCorrect\n      ? 'lightgreen'\n      : 'lightcoral';\n\n  return (\n    <div\n      style={{\n        margin: '20px',\n        padding: '20px',\n        backgroundColor: color,\n        borderRadius: '8px',\n        border: '2px solid gray',\n        boxShadow: isSelected ? '0 0 7pt 7pt yellow' : 'none',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        textAlign: 'center',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport interface QuestionLayoutProps {\n  question?: string;\n  answers?: Array<string>;\n  selectedAnswers?: Array<boolean>;\n  correctAnswerIndex?: number;\n  time?: number;\n}\n\nexport const QuestionLayout: FC<QuestionLayoutProps> = ({\n  question,\n  answers,\n  selectedAnswers,\n  correctAnswerIndex,\n  time,\n}) => {\n  return (\n    <>\n      {question && <Block>{question}</Block>}\n      {answers && selectedAnswers && (\n        <div\n          style={{\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'space-around',\n          }}\n        >\n          {answers.map((answer, index) => {\n            const isSelected = selectedAnswers[index];\n            const isCorrect =\n              correctAnswerIndex === undefined\n                ? undefined\n                : correctAnswerIndex === index;\n\n            return (\n              <Block key={answer} isSelected={isSelected} isCorrect={isCorrect}>\n                {answer}\n              </Block>\n            );\n          })}\n        </div>\n      )}\n      {time !== undefined && (\n        <Block isSelected={(time <= 10 * 1000 && time > 0) ? true : undefined} isCorrect={time === 0 ? false : undefined}>\n          <Timer value={time} />\n        </Block>\n      )}\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { Block } from './QuestionLayout';\n\ninterface CategoriesLayoutProps {\n  categories: Array<string>;\n}\n\nexport const CategoriesLayout: FC<CategoriesLayoutProps> = ({ categories }) => {\n  return (\n    <>\n      {categories.map((category) => (\n        <Block key={category}>{category}</Block>\n      ))}\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { Block } from './QuestionLayout';\n\ninterface StatusLayoutProps {\n  answeredQuestionsCount: number;\n  totalQuestionsCount: number;\n}\n\nexport const StatusLayout: FC<StatusLayoutProps> = ({\n  answeredQuestionsCount,\n  totalQuestionsCount,\n}) => {\n  return (\n    <Block>\n      odpowiedziano na {answeredQuestionsCount === totalQuestionsCount ? totalQuestionsCount : answeredQuestionsCount} z {totalQuestionsCount} pytań\n    </Block>\n  );\n};\n","export const TitleLayout = () => {\n  return (\n    <img\n      src=\"./postaw-na-milion-logo.png\"\n      alt=\"logo\"\n      style={{ width: '60%' }}\n    />\n  );\n};\n","import React, { useState } from 'react';\n\nimport { useListener } from '../pubnub/useListener';\nimport { defaultGameState, GameState } from '../state/GameState';\nimport { useInterval } from '../useInterval';\n\nimport { CategoriesLayout } from './CategoriesLayout';\nimport { QuestionLayout } from './QuestionLayout';\nimport { StatusLayout } from './StatusLayout';\nimport { TitleLayout } from './TitleLayout';\n\nconst DEFAULT_TIME_MS = 60 * 1000;\nconst TIME_STEP_MS = 1000;\n\nexport const PlayerLayout = () => {\n  const [state, setState] = useState<GameState>(defaultGameState);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [time, setTime] = useState<number>(DEFAULT_TIME_MS);\n\n  useListener((message) => {\n    if (message.type === 'game-state-update') {\n      setState(message.state);\n    } else if (message.type === 'reset-timer-60') {\n      setTime(DEFAULT_TIME_MS);\n    } else if (message.type === 'reset-timer-30') {\n      setTime(DEFAULT_TIME_MS / 2);\n    } else if (message.type === 'start-timer') {\n      setIsTimerRunning(true);\n    } else if (message.type === 'stop-timer') {\n      setIsTimerRunning(false);\n    }\n  });\n\n  useInterval(\n    () => {\n      setTime((time) => time - TIME_STEP_MS);\n    },\n    isTimerRunning && time > 0 ? TIME_STEP_MS : undefined\n  );\n\n  return (\n    <div\n      style={{\n        width: '100wh',\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n        background: 'linear-gradient(to right, #0575e6, #021b79)',\n        fontSize: '2em',\n      }}\n    >\n      {state.type === 'game-state-show-title' && <TitleLayout />}\n      {state.type === 'game-state-show-status' && (\n        <StatusLayout\n          answeredQuestionsCount={state.answeredQuestionsCount}\n          totalQuestionsCount={state.totalQuestionsCount}\n        />\n      )}\n      {state.type === 'game-state-show-categories' && (\n        <CategoriesLayout categories={state.categories} />\n      )}\n      {state.type === 'game-state-show-question' && (\n        <QuestionLayout\n          question={state.question}\n          answers={state.answers}\n          selectedAnswers={state.selectedAnswers}\n          correctAnswerIndex={state.correctAnswerIndex}\n          time={state.question ? time : undefined}\n        />\n      )}\n    </div>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport const useInterval = (callback: () => void, delay?: number) => {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => savedCallback.current?.();\n\n    if (delay !== undefined) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n","import { FC, ReactNode, useMemo } from 'react';\nimport PubNub from 'pubnub';\n\nimport { PubNubContext } from './PubNubContext';\n\nexport interface PubNubProviderProps {\n  authKey: string;\n  children: ReactNode;\n}\n\nexport const PubNubProvider: FC<PubNubProviderProps> = ({\n  authKey,\n  children,\n}) => {\n  const uuid = useMemo(() => PubNub.generateUUID(), []);\n\n  const pubnub = useMemo(() => {\n    console.debug('Generating new PubNub instance');\n    return new PubNub({\n      publishKey: process.env.REACT_APP_PUBLISH_KEY || '',\n      subscribeKey: process.env.REACT_APP_SUBSCRIBE_KEY || '',\n      authKey,\n      uuid,\n    });\n  }, [authKey, uuid]);\n\n  if (!authKey) {\n    return null;\n  }\n\n  return (\n    <PubNubContext.Provider value={pubnub}>{children}</PubNubContext.Provider>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { AuthKeyInput } from './components/AuthKeyInput';\nimport { ModeSelector } from './components/ModeSelector';\nimport { AdminLayout } from './layouts/AdminLayout';\nimport { PlayerLayout } from './layouts/PlayerLayout';\nimport { PubNubProvider } from './pubnub/PubNubProvider';\n\nexport const App = () => {\n  const [mode, setMode] = useState<'admin' | 'player' | undefined>();\n  const [authKey, setAuthKey] = useState('');\n\n  return (\n    <main>\n      {mode === undefined && <ModeSelector setMode={setMode} />}\n      {mode === 'player' && (\n        <PubNubProvider authKey=\"public\">\n          <PlayerLayout />\n        </PubNubProvider>\n      )}\n      {mode === 'admin' && (\n        <div style={{ padding: '20px' }}>\n          {authKey && (\n            <PubNubProvider authKey={authKey}>\n              <AdminLayout />\n            </PubNubProvider>\n          )}\n          <AuthKeyInput authKey={authKey} setAuthKey={setAuthKey} />\n        </div>\n      )}\n    </main>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}