{"version":3,"sources":["components/Button.tsx","components/AuthKeyInput.tsx","components/ModeSelector.tsx","pubnub/PubNubContext.ts","pubnub/useListener.ts","state/AdminState.ts","components/Questions.tsx","state/GameState.ts","components/QuestionsLoader.tsx","layouts/AdminLayout.tsx","pubnub/usePublisher.ts","components/Timer.tsx","layouts/QuestionLayout.tsx","layouts/CategoriesLayout.tsx","layouts/StatusLayout.tsx","layouts/TitleLayout.tsx","layouts/PlayerLayout.tsx","useInterval.ts","pubnub/PubNubProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","color","disabled","onClick","children","style","rest","backgroundColor","marginRight","padding","AuthKeyInput","authKey","setAuthKey","useState","value","setValue","display","alignItems","htmlFor","autoFocus","type","onChange","event","target","onKeyDown","key","flexGrow","margin","ModeSelector","setMode","marginTop","justifyContent","PubNubContext","createContext","undefined","channel","useListener","listener","listenerParameters","useMemo","message","console","debug","pubnub","useContext","Error","useEffect","addListener","subscribe","channels","removeListener","defaultRoundState","defaultAdminState","Questions","questions","usedQuestions","usedCategories","adminState","changeAdminState","length","map","question","isQuestionUsed","includes","id","showCheckbox","questionsSelectionMode","roundState","isQuestionSelected","pickedQuestionsIds","width","outline","checked","thisQuestionIndex","findIndex","splice","push","questionsById","answeredQuestionsCount","textDecoration","text","possibleCategories","filter","possibleCategory","index","join","answers","defaultGameState","QuestionsLoader","onQuestionsLoad","questionsJson","setQuestionsJson","loadQuestions","questionsArray","JSON","parse","forEach","marginBottom","AdminLayout","setAdminState","gameState","setGameState","publish","useCallback","usePublisher","state","changeGameState","send","then","catch","error","Object","values","unusedQuestions","shouldBeAskedLast","manuallySelectedQuestions","firstQuestion","secondQuestion","firstQuestionCategoryIndex","cateogry","firstQuestionCategory","firstQuestionCategoryId","secondQuestionCategoryIndex","category","secondQuestionCategory","secondQuestionCategoryId","categories","selectedAnswers","selection","correctAnswerIndex","totalQuestionsCount","keys","AnswersSelection","answer","answerIndex","selectAnswer","CategorySelection","selectCategory","categoryIndex","Array","fill","ClockSection","SynchronizationSection","pad","digits","repeat","slice","Timer","minutes","Math","floor","seconds","Block","isSelected","isCorrect","borderRadius","border","boxShadow","textAlign","QuestionLayout","time","CategoriesLayout","StatusLayout","TitleLayout","src","alt","DEFAULT_TIME_MS","PlayerLayout","setState","isTimerRunning","setIsTimerRunning","setTime","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","height","flexDirection","background","fontSize","PubNubProvider","uuid","PubNub","generateUUID","publishKey","process","subscribeKey","Provider","App","mode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27dfe948.chunk.js","sourcesContent":["import { FC, ReactNode } from 'react';\n\nexport interface ButtonProps {\n  color?: string;\n  children: ReactNode;\n  onClick: () => void;\n  disabled?: boolean;\n  style?: Record<string, unknown>;\n}\n\nexport const Button: FC<ButtonProps> = ({\n  color = '#efefef',\n  disabled,\n  onClick,\n  children,\n  style = {},\n  ...rest\n}) => {\n  return (\n    <button\n      style={{\n        backgroundColor: disabled ? '#efefef' : color,\n        marginRight: '10px',\n        padding: '5px',\n        ...style,\n      }}\n      onClick={onClick}\n      disabled={disabled}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n","import { ChangeEvent, KeyboardEvent, FC, useState } from 'react';\nimport { Button } from './Button';\n\nexport interface AuthKeyInputProps {\n  authKey: string;\n  setAuthKey: (authKey: string) => void;\n}\n\nexport const AuthKeyInput: FC<AuthKeyInputProps> = ({\n  authKey,\n  setAuthKey,\n}) => {\n  const [value, setValue] = useState(authKey);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      setAuthKey(value);\n    }\n  };\n\n  const handleClick = () => {\n    setAuthKey(value);\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <label htmlFor=\"auth-key\">klucz dostępu:</label>\n      <input\n        autoFocus\n        type=\"password\"\n        value={value}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        style={{ flexGrow: 1, margin: '0 10px' }}\n      />\n      <Button onClick={handleClick} color=\"lightcoral\">zmień</Button>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { Button } from './Button';\n\ninterface ModeSelectorProps {\n  setMode: (mode: 'admin' | 'player') => void;\n}\n\nexport const ModeSelector: FC<ModeSelectorProps> = ({ setMode }) => {\n  const handlePlayerModeButtonClick = () => {\n    setMode('player');\n  };\n\n  const handleAdminModeButtonClick = () => {\n    setMode('admin');\n  };\n\n  return (\n    <div\n      style={{ marginTop: '20px', display: 'flex', justifyContent: 'center' }}\n    >\n      <Button onClick={handlePlayerModeButtonClick} style={{ marginRight: '40px' }}>gracz</Button>\n      <Button onClick={handleAdminModeButtonClick}>admin</Button>\n    </div>\n  );\n};\n","import PubNub from 'pubnub';\nimport { createContext } from 'react';\n\nexport const PubNubContext = createContext<PubNub | undefined>(undefined);\n\nexport const channel = 'events';\n","import { ListenerParameters } from 'pubnub';\nimport { useContext, useEffect, useMemo } from 'react';\n\nimport { channel, PubNubContext } from '../pubnub/PubNubContext';\nimport { Message } from './PubNubMessage';\n\nexport const useListener = (listener: (message: Message) => void) => {\n  const listenerParameters: ListenerParameters = useMemo(\n    () => ({\n      message: (message) => {\n        console.debug('received message', message);\n\n        if (message.channel === channel) {\n          listener(message.message as Message);\n        }\n      },\n    }),\n    [listener]\n  );\n\n  const pubnub = useContext(PubNubContext);\n\n  if (!pubnub) {\n    throw new Error('PubNubContext is undefined');\n  }\n\n  useEffect(() => {\n    pubnub.addListener(listenerParameters);\n    pubnub.subscribe({ channels: ['events'] });\n    return () => pubnub?.removeListener(listenerParameters);\n  }, [pubnub, listenerParameters]);\n};\n","import { Question, QuestionsById } from './Question';\n\nexport interface AdminStateEmpty {\n  type: 'admin-state-empty';\n}\n\nexport interface AdminStateBase {\n  type: 'admin-state-base';\n  questionsSelectionMode: 'manual' | 'automatic';\n  usedQuestions: Array<string>;\n  usedCategories: Array<string>;\n  answeredQuestionsCount: number;\n  questionsById: QuestionsById;\n  roundState: RoundState;\n}\n\nexport interface RoundStateEmpty {\n  type: 'round-state-empty';\n}\n\nexport interface RoundStatePickQuestions {\n  type: 'round-state-pick-questions';\n  pickedQuestionsIds: Array<string>;\n}\n\nexport interface RoundStateSelectCategory {\n  type: 'round-state-select-category';\n  firstQuestion: Question;\n  firstQuestionCategory: string;\n  secondQuestion: Question;\n  secondQuestionCategory: string;\n}\n\nexport interface RoundStateShowQuestion {\n  type: 'round-state-show-question';\n  question: Question;\n}\n\nexport interface RoundStateSelectAnswers {\n  type: 'round-state-select-answers';\n  question: Question;\n}\n\nexport type RoundState =\n  | RoundStateEmpty\n  | RoundStatePickQuestions\n  | RoundStateSelectCategory\n  | RoundStateShowQuestion\n  | RoundStateSelectAnswers;\n\nexport const defaultRoundState: RoundState = { type: 'round-state-empty' };\n\nexport type AdminState = AdminStateEmpty | AdminStateBase;\n\nexport const defaultAdminState: AdminState = { type: 'admin-state-empty' };\n","import { FC } from 'react';\nimport { AdminState } from '../state/AdminState';\n\nimport { Question } from '../state/Question';\n\ninterface QuestionsProps {\n  adminState: AdminState;\n  changeAdminState: (AdminState: AdminState) => void;\n  questions: Array<Question>;\n  usedQuestions: Array<string>;\n  usedCategories: Array<string>;\n}\n\nexport const Questions: FC<QuestionsProps> = ({\n  questions,\n  usedQuestions,\n  usedCategories,\n  adminState,\n  changeAdminState,\n}) => {\n  return (\n    <div>\n      <h1>Wczytane pytania ({questions.length})</h1>\n      <ul>\n        {questions.map((question) => {\n          const isQuestionUsed = usedQuestions.includes(question.id);\n          const showCheckbox =\n            adminState.type === 'admin-state-base' &&\n            adminState.questionsSelectionMode === 'manual' &&\n            adminState.roundState.type === 'round-state-pick-questions';\n          const isQuestionSelected =\n            showCheckbox &&\n            adminState.type === 'admin-state-base' &&\n            adminState.roundState.type === 'round-state-pick-questions' &&\n            adminState.roundState.pickedQuestionsIds.includes(question.id);\n\n          const selectQuestion = () => {\n            if (\n              adminState.type === 'admin-state-base' &&\n              adminState.roundState.type === 'round-state-pick-questions'\n            ) {\n              const pickedQuestionsIds = [\n                ...adminState.roundState.pickedQuestionsIds,\n              ];\n              const thisQuestionIndex = pickedQuestionsIds.findIndex(\n                (id) => id === question.id\n              );\n              if (thisQuestionIndex > -1) {\n                pickedQuestionsIds.splice(thisQuestionIndex, 1);\n              } else {\n                pickedQuestionsIds.push(question.id);\n              }\n\n              changeAdminState({\n                questionsById: adminState.questionsById,\n                answeredQuestionsCount: adminState.answeredQuestionsCount,\n                usedCategories: adminState.usedCategories,\n                usedQuestions: adminState.usedQuestions,\n                questionsSelectionMode: adminState.questionsSelectionMode,\n                type: 'admin-state-base',\n                roundState: {\n                  type: 'round-state-pick-questions',\n                  pickedQuestionsIds,\n                },\n              });\n            }\n          };\n\n          return (\n            <li key={question.id}>\n              {showCheckbox && !isQuestionUsed && (\n                <input\n                  type=\"checkbox\"\n                  style={{\n                    width: '13px',\n                    outline: '5px solid lightgreen',\n                    backgroundColor: 'lightyellow',\n                    marginRight: '10px',\n                  }}\n                  checked={isQuestionSelected}\n                  onChange={selectQuestion}\n                />\n              )}\n              <span\n                style={{\n                  textDecoration: isQuestionUsed ? 'line-through' : 'none',\n                }}\n              >\n                {question.text}\n              </span>\n              <ul>\n                <li>\n                  kategorie:{' '}\n                  {question.possibleCategories\n                    .filter(\n                      (possibleCategory, index) =>\n                        !usedCategories.includes(`${question.id}-${index}`)\n                    )\n                    .join(', ')}\n                </li>\n                <li>\n                  zużyte kategorie:{' '}\n                  <span style={{ textDecoration: 'line-through' }}>\n                    {question.possibleCategories\n                      .filter((possibleCategory, index) =>\n                        usedCategories.includes(`${question.id}-${index}`)\n                      )\n                      .join(', ')}\n                  </span>\n                </li>\n                <li>odpowiedzi: {question.answers.join(', ')}</li>\n              </ul>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","export interface GameStateShowTitle {\n  type: 'game-state-show-title';\n}\n\nexport interface GameStateShowStatus {\n  type: 'game-state-show-status';\n  answeredQuestionsCount: number;\n  totalQuestionsCount: number;\n}\n\nexport interface GameStateShowCategories {\n  type: 'game-state-show-categories';\n  categories: Array<string>;\n}\n\nexport interface GameStateShowQuestion {\n  type: 'game-state-show-question';\n  question?: string;\n  answers: Array<string>;\n  selectedAnswers: Array<boolean>;\n  correctAnswerIndex?: number;\n}\n\nexport type GameState =\n  | GameStateShowTitle\n  | GameStateShowStatus\n  | GameStateShowCategories\n  | GameStateShowQuestion;\n\nexport const defaultGameState: GameState = { type: 'game-state-show-title' };\n","import { ChangeEvent, FC, KeyboardEvent, useState } from 'react';\n\nimport { Question, QuestionsById } from '../state/Question';\nimport { Button } from './Button';\n\ninterface QuestionsLoaderProps {\n  onQuestionsLoad: (questions: QuestionsById) => void;\n}\n\nexport const QuestionsLoader: FC<QuestionsLoaderProps> = ({\n  onQuestionsLoad,\n}) => {\n  const [questionsJson, setQuestionsJson] = useState('');\n\n  const loadQuestions = () => {\n    const questionsArray = JSON.parse(questionsJson) as Array<Question>;\n\n    const questionsById: Record<string, Question> = {};\n    questionsArray.forEach(\n      (question) => (questionsById[question.id] = question)\n    );\n\n    onQuestionsLoad(questionsById);\n  };\n\n  const handleQuestionsChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuestionsJson(event.target.value);\n  };\n\n  const handleQuestionsKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      loadQuestions();\n    }\n  };\n\n  const handleQuestionsClick = () => {\n    loadQuestions();\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n      <label htmlFor=\"questions\">wczytaj pytania:</label>\n      <input\n        type=\"text\"\n        value={questionsJson}\n        onChange={handleQuestionsChange}\n        onKeyDown={handleQuestionsKeyDown}\n        style={{ flexGrow: 1, margin: '0 10px' }}\n      />\n      <Button onClick={handleQuestionsClick} color=\"lightcoral\">\n        wczytaj\n      </Button>\n    </div>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { Message } from '../pubnub/PubNubMessage';\nimport { useListener } from '../pubnub/useListener';\n\nimport { usePublisher } from '../pubnub/usePublisher';\nimport { Questions } from '../components/Questions';\nimport { Button } from '../components/Button';\n\nimport { defaultGameState, GameState } from '../state/GameState';\nimport {\n  AdminState,\n  defaultAdminState,\n  defaultRoundState,\n} from '../state/AdminState';\nimport { QuestionsLoader } from '../components/QuestionsLoader';\n\nexport const AdminLayout = () => {\n  const [adminState, setAdminState] = useState<AdminState>(defaultAdminState);\n  const [gameState, setGameState] = useState<GameState>(defaultGameState);\n  const publish = usePublisher();\n\n  useListener((message) => {\n    if (message.type === 'admin-state-update') {\n      setAdminState(message.state);\n    } else if (message.type === 'game-state-update') {\n      setGameState(message.state);\n    }\n  });\n\n  const changeAdminState = (state: AdminState) => {\n    publish({ type: 'admin-state-update', state });\n  };\n\n  const changeGameState = (state: GameState) => {\n    publish({ type: 'game-state-update', state });\n  };\n\n  const send = (message: Message) => {\n    publish(message)\n      .then(() => {\n        console.debug(`successfully sent \"${message.type}\" message`);\n      })\n      .catch((error) => {\n        console.error(`failed to send \"${message.type}\" message`);\n        console.debug(error);\n      });\n  };\n\n  const startRound = () => {\n    if (adminState.type === 'admin-state-base') {\n      const questions = Object.values(adminState.questionsById);\n      let unusedQuestions = questions\n        .filter((question) => !adminState.usedQuestions.includes(question.id))\n        .filter((question) => !question.shouldBeAskedLast);\n\n      if (unusedQuestions.length === 0) {\n        // use those which shouldBeAskedLast\n        unusedQuestions = questions.filter(\n          (question) => !adminState.usedQuestions.includes(question.id)\n        );\n\n        if (unusedQuestions.length === 0) {\n          return;\n        }\n      }\n\n      const manuallySelectedQuestions =\n        adminState.roundState.type === 'round-state-pick-questions'\n          ? adminState.roundState.pickedQuestionsIds\n          : [];\n\n      const firstQuestion =\n        adminState.questionsSelectionMode === 'automatic'\n          ? unusedQuestions[0]\n          : adminState.questionsById[manuallySelectedQuestions[0]];\n      const secondQuestion =\n        adminState.questionsSelectionMode === 'automatic'\n          ? unusedQuestions.length === 1\n            ? firstQuestion\n            : unusedQuestions[1]\n          : manuallySelectedQuestions.length === 1\n          ? firstQuestion\n          : adminState.questionsById[manuallySelectedQuestions[1]];\n\n      const firstQuestionCategoryIndex = firstQuestion.possibleCategories.findIndex(\n        (cateogry, index) =>\n          !adminState.usedCategories.includes(`${firstQuestion.id}-${index}`)\n      );\n      const firstQuestionCategory =\n        firstQuestion.possibleCategories[firstQuestionCategoryIndex];\n      const firstQuestionCategoryId = `${firstQuestion.id}-${firstQuestionCategoryIndex}`;\n\n      const secondQuestionCategoryIndex = secondQuestion.possibleCategories.findIndex(\n        (category, index) =>\n          ![...adminState.usedCategories, firstQuestionCategoryId].includes(\n            `${secondQuestion.id}-${index}`\n          )\n      );\n      const secondQuestionCategory =\n        secondQuestion.possibleCategories[secondQuestionCategoryIndex];\n      const secondQuestionCategoryId = `${secondQuestion.id}-${secondQuestionCategoryIndex}`;\n\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        usedQuestions: adminState.usedQuestions,\n        questionsById: adminState.questionsById,\n        answeredQuestionsCount: adminState.answeredQuestionsCount,\n        usedCategories: [\n          ...adminState.usedCategories,\n          firstQuestionCategoryId,\n          secondQuestionCategoryId,\n        ],\n        roundState: {\n          type: 'round-state-select-category',\n          firstQuestion,\n          firstQuestionCategory,\n          secondQuestion,\n          secondQuestionCategory,\n        },\n      });\n\n      changeGameState({\n        type: 'game-state-show-categories',\n        categories: [firstQuestionCategory, secondQuestionCategory],\n      });\n    }\n  };\n\n  const showQuestion = () => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      adminState.roundState.type === 'round-state-show-question' &&\n      gameState.type === 'game-state-show-question'\n    ) {\n      send({\n        type: 'reset-timer-60',\n      });\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        questionsById: adminState.questionsById,\n        answeredQuestionsCount: adminState.answeredQuestionsCount,\n        usedCategories: adminState.usedCategories,\n        usedQuestions: adminState.usedQuestions,\n        roundState: {\n          type: 'round-state-select-answers',\n          question: adminState.roundState.question,\n        },\n      });\n      changeGameState({\n        type: 'game-state-show-question',\n        answers: gameState.answers,\n        selectedAnswers: gameState.selectedAnswers,\n        question: adminState.roundState.question.text,\n      });\n    }\n  };\n\n  const showGoodAnswers = () => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      adminState.roundState.type === 'round-state-select-answers' &&\n      gameState.type === 'game-state-show-question'\n    ) {\n      send({\n        type: 'stop-timer',\n      });\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        questionsById: adminState.questionsById,\n        answeredQuestionsCount: adminState.answeredQuestionsCount,\n        usedCategories: adminState.usedCategories,\n        usedQuestions: adminState.usedQuestions,\n        roundState: {\n          type: 'round-state-empty',\n        },\n      });\n      changeGameState({\n        type: 'game-state-show-question',\n        answers: gameState.answers,\n        selectedAnswers: gameState.selectedAnswers,\n        question: adminState.roundState.question.text,\n        correctAnswerIndex: adminState.roundState.question.correctAnswerIndex,\n      });\n    }\n  };\n\n  const showStatus = () => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      gameState.type === 'game-state-show-question' &&\n      gameState.correctAnswerIndex !== undefined\n    ) {\n      const answeredQuestionsCount = adminState.answeredQuestionsCount;\n      const totalQuestionsCount = Object.keys(adminState.questionsById).length;\n\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        questionsById: adminState.questionsById,\n        usedCategories: adminState.usedCategories,\n        usedQuestions: adminState.usedQuestions,\n        answeredQuestionsCount,\n        roundState: {\n          type: 'round-state-empty',\n        },\n      });\n\n      changeGameState(\n        answeredQuestionsCount === totalQuestionsCount\n          ? { type: 'game-state-show-title' }\n          : {\n              type: 'game-state-show-status',\n              answeredQuestionsCount,\n              totalQuestionsCount,\n            }\n      );\n    }\n  };\n\n  return (\n    <div>\n      {adminState.type === 'admin-state-base' && (\n        <>\n          <h1>Nawigacja</h1>\n          {adminState.questionsSelectionMode === 'manual' && (\n            <Button\n              disabled={\n                !(\n                  (gameState.type === 'game-state-show-title' ||\n                    gameState.type === 'game-state-show-status') &&\n                  adminState.roundState.type === 'round-state-empty'\n                )\n              }\n              onClick={() =>\n                changeAdminState({\n                  type: 'admin-state-base',\n                  questionsSelectionMode: adminState.questionsSelectionMode,\n                  questionsById: adminState.questionsById,\n                  answeredQuestionsCount: adminState.answeredQuestionsCount,\n                  usedCategories: adminState.usedCategories,\n                  usedQuestions: adminState.usedQuestions,\n                  roundState: {\n                    type: 'round-state-pick-questions',\n                    pickedQuestionsIds: [],\n                  },\n                })\n              }\n              style={{ marginBottom: '10px' }}\n              color=\"lightgreen\"\n            >\n              wybierz pytania\n            </Button>\n          )}\n          <Button\n            disabled={\n              !(\n                (gameState.type === 'game-state-show-title' ||\n                  gameState.type === 'game-state-show-status') &&\n                ((adminState.questionsSelectionMode === 'automatic' &&\n                  adminState.roundState.type === 'round-state-empty') ||\n                  (adminState.roundState.type ===\n                    'round-state-pick-questions' &&\n                    adminState.roundState.pickedQuestionsIds.length > 0 &&\n                    adminState.roundState.pickedQuestionsIds.length <= 2))\n              )\n            }\n            onClick={startRound}\n            color=\"lightgreen\"\n            style={{ marginBottom: '10px' }}\n          >\n            rozpocznij rundę\n          </Button>\n          <Button\n            disabled={\n              !(adminState.roundState.type === 'round-state-show-question')\n            }\n            color=\"lightgreen\"\n            onClick={showQuestion}\n            style={{ marginBottom: '10px' }}\n          >\n            pokaż pytanie\n          </Button>\n          <Button\n            disabled={\n              !(adminState.roundState.type === 'round-state-select-answers') ||\n              (gameState.type === 'game-state-show-question' &&\n                gameState.selectedAnswers.filter(\n                  (selection) => selection === true\n                ).length === 0)\n            }\n            onClick={showGoodAnswers}\n            color=\"lightgreen\"\n            style={{ marginBottom: '10px' }}\n          >\n            pokaż poprawne odpowiedzi\n          </Button>\n          <Button\n            disabled={\n              !(\n                gameState.type === 'game-state-show-question' &&\n                gameState.correctAnswerIndex !== undefined\n              )\n            }\n            onClick={showStatus}\n            color=\"lightgreen\"\n            style={{ marginBottom: '10px' }}\n          >\n            pokaż podsumowanie\n          </Button>\n\n          <ClockSection send={send} />\n          {(adminState.roundState.type === 'round-state-select-category' ||\n            adminState.roundState.type === 'round-state-select-answers') && (\n            <>\n              <h1>Rozgrywka</h1>\n              {adminState.roundState.type === 'round-state-select-category' && (\n                <CategorySelection\n                  changeAdminState={changeAdminState}\n                  changeGameState={changeGameState}\n                  adminState={adminState}\n                  gameState={gameState}\n                />\n              )}\n              {adminState.roundState.type === 'round-state-select-answers' && (\n                <AnswersSelection\n                  changeAdminState={changeAdminState}\n                  changeGameState={changeGameState}\n                  adminState={adminState}\n                  gameState={gameState}\n                />\n              )}\n            </>\n          )}\n        </>\n      )}\n      {adminState.type === 'admin-state-base' && (\n        <Questions\n          questions={Object.values(adminState.questionsById)}\n          usedQuestions={adminState.usedQuestions}\n          usedCategories={adminState.usedCategories}\n          adminState={adminState}\n          changeAdminState={changeAdminState}\n        />\n      )}\n      <SynchronizationSection\n        adminState={adminState}\n        changeAdminState={changeAdminState}\n        gameState={gameState}\n        changeGameState={changeGameState}\n      />\n      <h1>Konfiguracja serwisu</h1>\n      <QuestionsLoader\n        onQuestionsLoad={(questionsById) => {\n          changeAdminState({\n            type: 'admin-state-base',\n            questionsSelectionMode: 'manual',\n            usedQuestions: [],\n            usedCategories: [],\n            answeredQuestionsCount: 0,\n            roundState: defaultRoundState,\n            questionsById,\n          });\n          changeGameState(defaultGameState);\n        }}\n      />\n      <p>\n        ręczny wybór pytań{' '}\n        <input\n          type=\"checkbox\"\n          disabled={\n            !(\n              adminState.type === 'admin-state-base' &&\n              adminState.roundState.type === 'round-state-empty' &&\n              (gameState.type === 'game-state-show-title' ||\n                gameState.type === 'game-state-show-status')\n            )\n          }\n          checked={\n            adminState.type === 'admin-state-base' &&\n            adminState.questionsSelectionMode === 'manual'\n          }\n          onChange={() => {\n            if (adminState.type === 'admin-state-base') {\n              changeAdminState({\n                ...adminState,\n                questionsSelectionMode:\n                  adminState.questionsSelectionMode === 'automatic'\n                    ? 'manual'\n                    : 'automatic',\n              });\n            }\n          }}\n        />\n      </p>\n    </div>\n  );\n};\n\ninterface AnswersSelectionProps {\n  adminState: AdminState;\n  changeAdminState: (adminState: AdminState) => void;\n  gameState: GameState;\n  changeGameState: (gameState: GameState) => void;\n}\n\nconst AnswersSelection: FC<AnswersSelectionProps> = ({\n  adminState,\n  gameState,\n  changeGameState,\n}) => {\n  if (\n    adminState.type !== 'admin-state-base' ||\n    adminState.roundState.type !== 'round-state-select-answers'\n  ) {\n    return null;\n  }\n\n  const selectAnswer = (answerIndex: number) => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      adminState.roundState.type === 'round-state-select-answers' &&\n      gameState.type === 'game-state-show-question'\n    ) {\n      const selectedAnswers = [...gameState.selectedAnswers];\n      selectedAnswers[answerIndex] = !selectedAnswers[answerIndex];\n\n      changeGameState({\n        type: 'game-state-show-question',\n        question: gameState.question,\n        answers: gameState.answers,\n        selectedAnswers,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Przełącz zaznaczenie odpowiedzi</h2>\n      {adminState.roundState.question.answers.map((answer, index) => {\n        return (\n          <Button\n            key={answer}\n            onClick={() => selectAnswer(index)}\n            color={\n              gameState.type === 'game-state-show-question' &&\n              gameState.selectedAnswers[index]\n                ? 'yellow'\n                : 'lightyellow'\n            }\n            style={{ marginBottom: '10px' }}\n          >\n            {answer}\n          </Button>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface CategorySelectionProps {\n  adminState: AdminState;\n  changeAdminState: (adminState: AdminState) => void;\n  gameState: GameState;\n  changeGameState: (gameState: GameState) => void;\n}\n\nconst CategorySelection: FC<CategorySelectionProps> = ({\n  adminState,\n  changeAdminState,\n  changeGameState,\n}) => {\n  if (\n    adminState.type !== 'admin-state-base' ||\n    adminState.roundState.type !== 'round-state-select-category'\n  ) {\n    return null;\n  }\n\n  const selectCategory = (categoryIndex: number) => {\n    if (\n      adminState.type === 'admin-state-base' &&\n      adminState.roundState.type === 'round-state-select-category'\n    ) {\n      const question =\n        categoryIndex === 0\n          ? adminState.roundState.firstQuestion\n          : adminState.roundState.secondQuestion;\n\n      changeAdminState({\n        type: 'admin-state-base',\n        questionsSelectionMode: adminState.questionsSelectionMode,\n        usedQuestions: [...adminState.usedQuestions, question.id],\n        questionsById: adminState.questionsById,\n        answeredQuestionsCount: adminState.answeredQuestionsCount + 1,\n        usedCategories: adminState.usedCategories,\n        roundState: {\n          type: 'round-state-show-question',\n          question,\n        },\n      });\n      changeGameState({\n        type: 'game-state-show-question',\n        answers: question.answers,\n        selectedAnswers: new Array(question.answers.length).fill(false),\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Wskaż wybraną kategorię</h2>\n      <Button onClick={() => selectCategory(0)} color=\"lightgreen\">\n        {adminState.roundState.firstQuestionCategory}\n      </Button>\n      <Button onClick={() => selectCategory(1)} color=\"lightgreen\">\n        {adminState.roundState.secondQuestionCategory}\n      </Button>\n    </div>\n  );\n};\n\ninterface ClockSectionProps {\n  send: (message: Message) => void;\n}\n\nconst ClockSection: FC<ClockSectionProps> = ({ send }) => {\n  return (\n    <div>\n      <h1>Zegar</h1>\n      <div>\n        <Button\n          onClick={() => send({ type: 'start-timer' })}\n          style={{ marginBottom: '10px' }}\n        >\n          start\n        </Button>\n        <Button\n          onClick={() => send({ type: 'stop-timer' })}\n          style={{ marginBottom: '10px' }}\n        >\n          stop\n        </Button>\n        <Button\n          onClick={() => send({ type: 'reset-timer-60' })}\n          style={{ marginBottom: '10px' }}\n        >\n          reset 60s\n        </Button>\n        <Button\n          onClick={() => send({ type: 'reset-timer-30' })}\n          style={{ marginBottom: '10px' }}\n        >\n          reset 30s\n        </Button>\n      </div>\n    </div>\n  );\n};\n\ninterface AdminSectionProps {\n  adminState: AdminState;\n  changeAdminState: (state: AdminState) => void;\n  gameState: GameState;\n  changeGameState: (state: GameState) => void;\n}\n\nconst SynchronizationSection: FC<AdminSectionProps> = ({\n  adminState,\n  changeAdminState,\n  gameState,\n  changeGameState,\n}) => {\n  return (\n    <div>\n      <h1>Synchronizacja</h1>\n      <Button\n        onClick={() => {\n          changeAdminState(adminState);\n          changeGameState(gameState);\n        }}\n        color=\"yellow\"\n      >\n        wymuś propagację stanu\n      </Button>\n      <Button\n        onClick={() => {\n          changeAdminState(defaultAdminState);\n          changeGameState(defaultGameState);\n        }}\n        color=\"lightcoral\"\n      >\n        resetuj stan\n      </Button>\n    </div>\n  );\n};\n","import { useCallback, useContext } from 'react';\n\nimport { channel, PubNubContext } from '../pubnub/PubNubContext';\nimport { Message } from './PubNubMessage';\n\nexport const usePublisher = () => {\n  const pubnub = useContext(PubNubContext);\n\n  if (!pubnub) {\n    throw new Error('PubNubContext is undefined');\n  }\n\n  const publish = useCallback(\n    (message: Message) =>\n      pubnub.publish({\n        channel,\n        message,\n      }),\n    [pubnub]\n  );\n\n  return publish;\n};\n","import { FC } from 'react';\n\nconst pad = (value: number, digits: number) => {\n  return ('0'.repeat(digits) + value).slice(-1 * digits);\n};\n\ninterface TimerProps {\n  value: number;\n}\n\nexport const Timer: FC<TimerProps> = ({ value }) => {\n  const minutes = Math.floor(value / (1000 * 60));\n  const seconds = Math.floor(value / 1000) % 60;\n\n  return (\n    <span>\n      {pad(minutes, 2)}:{pad(seconds, 2)}\n    </span>\n  );\n};\n","import { FC, ReactNode } from 'react';\nimport { Timer } from '../components/Timer';\n\ninterface BlockProps {\n  children: ReactNode;\n  isSelected?: boolean;\n  isCorrect?: boolean;\n}\n\nexport const Block: FC<BlockProps> = ({\n  children,\n  isSelected = false,\n  isCorrect,\n}) => {\n  const color =\n    isCorrect === undefined\n      ? '#f1f1f1'\n      : isCorrect\n      ? 'lightgreen'\n      : 'lightcoral';\n\n  return (\n    <div\n      style={{\n        margin: '20px',\n        padding: '20px',\n        backgroundColor: color,\n        borderRadius: '8px',\n        border: '2px solid gray',\n        boxShadow: isSelected ? '0 0 7pt 7pt yellow' : 'none',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        textAlign: 'center',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport interface QuestionLayoutProps {\n  question?: string;\n  answers?: Array<string>;\n  selectedAnswers?: Array<boolean>;\n  correctAnswerIndex?: number;\n  time?: number;\n}\n\nexport const QuestionLayout: FC<QuestionLayoutProps> = ({\n  question,\n  answers,\n  selectedAnswers,\n  correctAnswerIndex,\n  time,\n}) => {\n  return (\n    <>\n      {question && <Block>{question}</Block>}\n      {answers && selectedAnswers && (\n        <div\n          style={{\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'space-around',\n          }}\n        >\n          {answers.map((answer, index) => {\n            const isSelected = selectedAnswers[index];\n            const isCorrect =\n              correctAnswerIndex === undefined\n                ? undefined\n                : correctAnswerIndex === index;\n\n            return (\n              <Block key={answer} isSelected={isSelected} isCorrect={isCorrect}>\n                {answer}\n              </Block>\n            );\n          })}\n        </div>\n      )}\n      {time !== undefined && (\n        <Block isSelected={(time <= 10 * 1000 && time > 0) ? true : undefined} isCorrect={time === 0 ? false : undefined}>\n          <Timer value={time} />\n        </Block>\n      )}\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { Block } from './QuestionLayout';\n\ninterface CategoriesLayoutProps {\n  categories: Array<string>;\n}\n\nexport const CategoriesLayout: FC<CategoriesLayoutProps> = ({ categories }) => {\n  return (\n    <>\n      {categories.map((category) => (\n        <Block key={category}>{category}</Block>\n      ))}\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { Block } from './QuestionLayout';\n\ninterface StatusLayoutProps {\n  answeredQuestionsCount: number;\n  totalQuestionsCount: number;\n}\n\nexport const StatusLayout: FC<StatusLayoutProps> = ({\n  answeredQuestionsCount,\n  totalQuestionsCount,\n}) => {\n  return (\n    <Block>\n      odpowiedziano na {answeredQuestionsCount === totalQuestionsCount ? totalQuestionsCount : answeredQuestionsCount} z {totalQuestionsCount} pytań\n    </Block>\n  );\n};\n","export const TitleLayout = () => {\n  return (\n    <img\n      src=\"./postaw-na-milion-logo.png\"\n      alt=\"logo\"\n      style={{ width: '60%' }}\n    />\n  );\n};\n","import React, { useState } from 'react';\n\nimport { useListener } from '../pubnub/useListener';\nimport { defaultGameState, GameState } from '../state/GameState';\nimport { useInterval } from '../useInterval';\n\nimport { CategoriesLayout } from './CategoriesLayout';\nimport { QuestionLayout } from './QuestionLayout';\nimport { StatusLayout } from './StatusLayout';\nimport { TitleLayout } from './TitleLayout';\n\nconst DEFAULT_TIME_MS = 60 * 1000;\nconst TIME_STEP_MS = 1000;\n\nexport const PlayerLayout = () => {\n  const [state, setState] = useState<GameState>(defaultGameState);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [time, setTime] = useState<number>(DEFAULT_TIME_MS);\n\n  useListener((message) => {\n    if (message.type === 'game-state-update') {\n      setState(message.state);\n    } else if (message.type === 'reset-timer-60') {\n      setTime(DEFAULT_TIME_MS);\n    } else if (message.type === 'reset-timer-30') {\n      setTime(DEFAULT_TIME_MS / 2);\n    } else if (message.type === 'start-timer') {\n      setIsTimerRunning(true);\n    } else if (message.type === 'stop-timer') {\n      setIsTimerRunning(false);\n    }\n  });\n\n  useInterval(\n    () => {\n      setTime((time) => time - TIME_STEP_MS);\n    },\n    isTimerRunning && time > 0 ? TIME_STEP_MS : undefined\n  );\n\n  return (\n    <div\n      style={{\n        width: '100wh',\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n        background: 'linear-gradient(to right, #0575e6, #021b79)',\n        fontSize: '2em',\n      }}\n    >\n      {state.type === 'game-state-show-title' && <TitleLayout />}\n      {state.type === 'game-state-show-status' && (\n        <StatusLayout\n          answeredQuestionsCount={state.answeredQuestionsCount}\n          totalQuestionsCount={state.totalQuestionsCount}\n        />\n      )}\n      {state.type === 'game-state-show-categories' && (\n        <CategoriesLayout categories={state.categories} />\n      )}\n      {state.type === 'game-state-show-question' && (\n        <QuestionLayout\n          question={state.question}\n          answers={state.answers}\n          selectedAnswers={state.selectedAnswers}\n          correctAnswerIndex={state.correctAnswerIndex}\n          time={state.question ? time : undefined}\n        />\n      )}\n    </div>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport const useInterval = (callback: () => void, delay?: number) => {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => savedCallback.current?.();\n\n    if (delay !== undefined) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n","import { FC, ReactNode, useMemo } from 'react';\nimport PubNub from 'pubnub';\n\nimport { PubNubContext } from './PubNubContext';\n\nexport interface PubNubProviderProps {\n  authKey: string;\n  children: ReactNode;\n}\n\nexport const PubNubProvider: FC<PubNubProviderProps> = ({\n  authKey,\n  children,\n}) => {\n  const uuid = useMemo(() => PubNub.generateUUID(), []);\n\n  const pubnub = useMemo(() => {\n    console.debug('Generating new PubNub instance');\n    return new PubNub({\n      publishKey: process.env.REACT_APP_PUBLISH_KEY || '',\n      subscribeKey: process.env.REACT_APP_SUBSCRIBE_KEY || '',\n      authKey,\n      uuid,\n    });\n  }, [authKey, uuid]);\n\n  if (!authKey) {\n    return null;\n  }\n\n  return (\n    <PubNubContext.Provider value={pubnub}>{children}</PubNubContext.Provider>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { AuthKeyInput } from './components/AuthKeyInput';\nimport { ModeSelector } from './components/ModeSelector';\nimport { AdminLayout } from './layouts/AdminLayout';\nimport { PlayerLayout } from './layouts/PlayerLayout';\nimport { PubNubProvider } from './pubnub/PubNubProvider';\n\nexport const App = () => {\n  const [mode, setMode] = useState<'admin' | 'player' | undefined>();\n  const [authKey, setAuthKey] = useState('');\n\n  return (\n    <main>\n      {mode === undefined && <ModeSelector setMode={setMode} />}\n      {mode === 'player' && (\n        <PubNubProvider authKey=\"public\">\n          <PlayerLayout />\n        </PubNubProvider>\n      )}\n      {mode === 'admin' && (\n        <div style={{ padding: '20px' }}>\n          {authKey && (\n            <PubNubProvider authKey={authKey}>\n              <AdminLayout />\n            </PubNubProvider>\n          )}\n          <AuthKeyInput authKey={authKey} setAuthKey={setAuthKey} />\n        </div>\n      )}\n    </main>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}